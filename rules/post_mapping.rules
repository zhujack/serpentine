__author__  = "Sean Davis & Jack Zhu"
__license__ = "MIT"

def _knownIndels_to_GATK(known):
    """Convert a list of file locations to a format for the GATK command line"""
    try:
        return(' '.join(["-known " + x for x in known]))
    except KeyError:
        return(' ')

rule bamtdf:
    input:
        bam="{base}/bam/{sample}.final.bam",
        bai="{base}/bam/{sample}.final.bam.bai",
    output: 
        "{base}/bam/{sample}.final.bam.tdf"
    params: 
        batch="-l nodes=1:gpfs -q ccr",
        genome = config['reference'].replace("human_g1k_v37", "1kg_v37").replace("ucsc.hg19", "hg19")
    version: 
        "2.3.31"
    shell: """
module load igvtools/{version}
${{IGVTOOLSHOME}}/igvtools \
count {input.bam} {output} {params.genome}
"""

rule gatk_print_reads:
    input:
        bam = "TEMP/{sample}.realigned.bam",
        bai = "TEMP/{sample}.realigned.bam.bai",
        recal_table = "TEMP/{sample}.recal_table",
        reference = config['references'][config['reference']]
    output:
        bam="{base}/{sample}.final.bam",
        bai="{base}/{sample}.final.bam.bai"
    params:
        batch = "-l nodes=1:gpfs -q ccr",
        tmpBai = "{base}/{sample}.final.bai"
    threads: 8
    version: 
        config['gatkVersion']
    shell: """
module load GATK/{version}
java -Xmx24g -jar $GATKJAR \
-T PrintReads \
-nct {threads} \
-I {input.bam} \
-R {input.reference} \
-BQSR {input.recal_table} \
-o {output.bam}

if [ -f {params.tmpBai} ];then
    mv {params.tmpBai} {output.bai}
fi
"""

rule gatk_base_recalibrator:
    input:
        bam = "TEMP/{sample}.realigned.bam",
        bai = "TEMP/{sample}.realigned.bam.bai",
        dbsnp = config['resources']['dbsnp'],
        reference = config['references'][config['reference']]
    output:
        temp("TEMP/{sample}.recal_table")
    params:
        batch = "-l nodes=1:gpfs -q ccr"
    threads:
        8
    version: config['gatkVersion']
    shell: """
module load GATK/{version}
java -Xmx24g -jar $GATKJAR \
-T BaseRecalibrator \
-nct {threads} \
-I {input.bam} \
-R {input.reference} \
-knownSites {input.dbsnp} \
-o {output}
"""

rule gatk_realigner_target_creator:
    input:
        bam = "TEMP/{sample}.md.bam",
        bai = "TEMP/{sample}.md.bam.bai",
        known = config['resources']['knownIndels'],
        reference = config['references'][config['reference']]
    output: 
        temp("TEMP/{sample}.md.intervals")
    params:
        batch = "-l nodes=1:gpfs"
    threads:
        16
    version: config['gatkVersion']
    run:
        knownIndels = _knownIndels_to_GATK(input.known)
        shell("""
module load GATK/{version}
java -Xmx24g -jar $GATKJAR \
-T RealignerTargetCreator \
-I {input.bam} \
-R {input.reference} \
{knownIndels} \
-nt {threads} \
-o {output}
""")

rule gatk_indel_realigner:
    input:
        bam = "TEMP/{sample}.md.bam",
        bai = "TEMP/{sample}.md.bam.bai",
        known = config['resources']['knownIndels'],
        intervals = "TEMP/{sample}.md.intervals",
        reference = config['references'][config['reference']]
    output:
        temp("TEMP/{sample}.realigned.bam")
    params:
        batch = "-l nodes=1:gpfs"
    threads: 8
    version: config['gatkVersion']
    run:
        knownIndels = _knownIndels_to_GATK(input.known)
        shell("""
module load GATK/{version}
java -Xmx24g -jar $GATKJAR \
-T IndelRealigner \
-I {input.bam} \
-R {input.reference} \
{knownIndels} \
--targetIntervals {input.intervals} \
-o {output}
""")

rule index_bam:
    threads: 8
    input: 
        "{base}.bam"
    output: 
        "{base}.bam.bai"
    params: batch="-l nodes=1:gpfs"
    version: "0.4.6"
    shell: """
module load sambamba/{version}
sambamba index -t {threads} {input}
"""


rule mvDup:
    threads: 1
    input: "TEMP/{sample}.final.bam.dupmetrics"
    output: "{base}/qc/{sample}.final.bam.dupmetrics"
    params: batch="-l nodes=1:gpfs"
    version: "1.119"
    shell: """
mv {input} {output}
"""

rule markdups:
    threads: 1
    input: "TEMP/{sample}.sample.bam",
           "TEMP/{sample}.sample.bam.bai"
    output: bam=temp("TEMP/{sample}.md.bam"),
            metrics=temp("TEMP/{sample}.final.bam.dupmetrics")
    params: 
        batch="-l nodes=1:gpfs",
        qc_dir = lambda wildcards: "SUBJECT/{subject}/{sample}/{reference}.{aligner}/qc".format(subject=SAMPLE_TO_SUBJECT[wildcards.sample], sample=wildcards.sample,  reference=config['reference'], aligner=config['aligner'] )
    version: "1.119"
    shell: """
module load picard/{version}
java -Xmx24g -jar ${{PICARDJARPATH}}/MarkDuplicates.jar \
AS=true M={output.metrics} \
O={output.bam} \
I={input[0]} \
REMOVE_DUPLICATES=false \
VALIDATION_STRINGENCY=SILENT

# if [ ! -d {params.qc_dir} ]; then
#     mkdir -p {params.qc_dir}
# fi
#
# cp {output.metrics} {params.qc_dir}

"""

rule mergeBam2Sample:
    params:
        batch="-l nodes=1:gpfs"
    input: lambda wildcards: expand("TEMP/{unit}.unit.bam", \
                             unit = SAMPLE_TO_UNIT[wildcards.sample])
    output:
        temp("TEMP/{sample}.sample.bam")
    threads: 2
    version: "1.119"
    run:
        cmd = """module load picard/1.119 && java -jar $PICARDJARPATH/MergeSamFiles.jar AS=true USE_THREADING=true VALIDATION_STRINGENCY=SILENT {0}""".format(' '.join(['I={0}'.format(i) for i in input]))
        cmd = cmd + " O={output}"
        print(cmd)
        shell(cmd,shell=True)

